{"ast":null,"code":"import \"source-map-support/register\";\nimport * as uuid from \"uuid\";\nimport AWS from \"aws-sdk\";\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nexport function main(event, context, callback) {\n  //요청 본문은 'event.body'의 JSON 인코딩 문자열로 전달됩니다.\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: \"notes\",\n    // 'Item'은 생성 될 항목의 속성을 포함합니다.\n    // - 'userId': 사용자 신원은 Cognito ID 풀 ID는 인증 된 사용자의 사용자 ID를 사용합니다.\n    // - 'noteId': 고유한 uuid\n    // - 'content': 요청 본문으로부터 파싱 됨\n    // - 'attachment': 요청 본문에서 파싱 됨\n    // - 'createdAt': 현재 유닉스 타임 스탬프\n    Item: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: uuid.v1(),\n      content: data.content,\n      attachment: data.attachment,\n      createdAt: Date.now()\n    }\n  };\n  dynamoDb.put(params, (error, data) => {\n    // CORS (Cross-Origin Resource Sharing)를 사용하도록 응답 헤더를 설정합니다.\n    const headers = {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true\n    }; // 에러발생시 상태코드 500을 반환합니다.\n\n    if (error) {\n      const response = {\n        statusCode: 500,\n        headers: headers,\n        body: JSON.stringify({\n          status: false\n        })\n      };\n      callback(null, response);\n      return;\n    } // 새로운 항목이 생성되면 상태 코드 200을 반환합니다.\n\n\n    const response = {\n      statusCode: 200,\n      headers: headers,\n      body: JSON.stringify(params.Item)\n    };\n    callback(null, response);\n  });\n}","map":{"version":3,"sources":["C:/Users/program_pc/serverless-stack-2-api/create.js"],"names":["uuid","AWS","dynamoDb","DynamoDB","DocumentClient","main","event","context","callback","data","JSON","parse","body","params","TableName","Item","userId","requestContext","identity","cognitoIdentityId","noteId","v1","content","attachment","createdAt","Date","now","put","error","headers","response","statusCode","stringify","status"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,OAAOC,GAAP,MAAgB,SAAhB;AAEA,MAAMC,QAAQ,GAAG,IAAID,GAAG,CAACE,QAAJ,CAAaC,cAAjB,EAAjB;AAEA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AAC7C;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,IAAjB,CAAb;AAEA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAE,OADE;AAEZ;AACA;AACA;AACA;AACA;AACA;AACDC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEV,KAAK,CAACW,cAAN,CAAqBC,QAArB,CAA8BC,iBADlC;AAEJC,MAAAA,MAAM,EAAEpB,IAAI,CAACqB,EAAL,EAFJ;AAGJC,MAAAA,OAAO,EAAEb,IAAI,CAACa,OAHV;AAIJC,MAAAA,UAAU,EAAEd,IAAI,CAACc,UAJb;AAKJC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AALP;AARO,GAAf;AAiBAxB,EAAAA,QAAQ,CAACyB,GAAT,CAAad,MAAb,EAAqB,CAACe,KAAD,EAAQnB,IAAR,KAAiB;AACpC;AACA,UAAMoB,OAAO,GAAG;AACd,qCAA+B,GADjB;AAEd,0CAAoC;AAFtB,KAAhB,CAFoC,CAOpC;;AACA,QAAID,KAAJ,EAAW;AACT,YAAME,QAAQ,GAAG;AACfC,QAAAA,UAAU,EAAE,GADG;AAEfF,QAAAA,OAAO,EAAEA,OAFM;AAGfjB,QAAAA,IAAI,EAAEF,IAAI,CAACsB,SAAL,CAAe;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAf;AAHS,OAAjB;AAKAzB,MAAAA,QAAQ,CAAC,IAAD,EAAOsB,QAAP,CAAR;AACA;AACD,KAhBmC,CAkBvC;;;AACG,UAAMA,QAAQ,GAAG;AACfC,MAAAA,UAAU,EAAE,GADG;AAEfF,MAAAA,OAAO,EAAEA,OAFM;AAGfjB,MAAAA,IAAI,EAAEF,IAAI,CAACsB,SAAL,CAAenB,MAAM,CAACE,IAAtB;AAHS,KAAjB;AAKAP,IAAAA,QAAQ,CAAC,IAAD,EAAOsB,QAAP,CAAR;AACD,GAzBD;AA0BD","sourcesContent":["import * as uuid from \"uuid\";\r\nimport AWS from \"aws-sdk\";\r\n\r\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\r\n\r\nexport function main(event, context, callback) {\r\n  //요청 본문은 'event.body'의 JSON 인코딩 문자열로 전달됩니다.\r\n  const data = JSON.parse(event.body);\r\n\r\n  const params = {\r\n    TableName: \"notes\",\r\n     // 'Item'은 생성 될 항목의 속성을 포함합니다.\r\n     // - 'userId': 사용자 신원은 Cognito ID 풀 ID는 인증 된 사용자의 사용자 ID를 사용합니다.\r\n     // - 'noteId': 고유한 uuid\r\n     // - 'content': 요청 본문으로부터 파싱 됨\r\n     // - 'attachment': 요청 본문에서 파싱 됨\r\n     // - 'createdAt': 현재 유닉스 타임 스탬프\r\n    Item: {\r\n      userId: event.requestContext.identity.cognitoIdentityId,\r\n      noteId: uuid.v1(),\r\n      content: data.content,\r\n      attachment: data.attachment,\r\n      createdAt: Date.now()\r\n    }\r\n  };\r\n\r\n  dynamoDb.put(params, (error, data) => {\r\n    // CORS (Cross-Origin Resource Sharing)를 사용하도록 응답 헤더를 설정합니다.\r\n    const headers = {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Access-Control-Allow-Credentials\": true\r\n    };\r\n\r\n    // 에러발생시 상태코드 500을 반환합니다.\r\n    if (error) {\r\n      const response = {\r\n        statusCode: 500,\r\n        headers: headers,\r\n        body: JSON.stringify({ status: false })\r\n      };\r\n      callback(null, response);\r\n      return;\r\n    }\r\n\r\n\t// 새로운 항목이 생성되면 상태 코드 200을 반환합니다.\r\n    const response = {\r\n      statusCode: 200,\r\n      headers: headers,\r\n      body: JSON.stringify(params.Item)\r\n    };\r\n    callback(null, response);\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}