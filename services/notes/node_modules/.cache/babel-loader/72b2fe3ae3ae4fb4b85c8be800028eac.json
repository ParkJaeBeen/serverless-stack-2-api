{"ast":null,"code":"import \"source-map-support/register\";\nimport handler from \"./libs/handler-lib\";\nimport dynamoDb from \"./libs/dynamodb-lib\";\nexport const main = handler(async (event, context) => {\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: \"notes\",\n    // 'Key' 수정하고자 하는 아이템의 파티션 키와 정렬 키를 정의합니다.\n    // - 'userId': 인증된 사용자의 Cognito Identity Pool의 인증 ID\n    // - 'noteId': 경로 파라미터 \n    Key: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: event.pathParameters.id\n    },\n    // 'UpdateExpression' 업데이트 될 속성을 정의합니다.\n    // 'ExpressionAttributeValues' 업데이트 표현식의 값을 정의합니다.\n    UpdateExpression: \"SET content = :content, attachment = :attachment\",\n    ExpressionAttributeValues: {\n      \":attachment\": data.attachment || null,\n      \":content\": data.content || null\n    },\n    // 'ReturnValues' 아이템 속성을 반환할지 여부와 방법을 지정합니다.\n    // 여기서 ALL_NEW는 업데이트 후 항목의 모든 속성을 반환합니다.\n    // 아래에서 '결과값'을 검사하여 다른 설정에서 작동하는 방식을 확인할 수 있습니다.\n    ReturnValues: \"ALL_NEW\"\n  };\n  await dynamoDb.update(params);\n  return {\n    status: true\n  };\n});","map":{"version":3,"sources":["C:/Users/program_pc/serverless-stack-2-api/update.js"],"names":["handler","dynamoDb","main","event","context","data","JSON","parse","body","params","TableName","Key","userId","requestContext","identity","cognitoIdentityId","noteId","pathParameters","id","UpdateExpression","ExpressionAttributeValues","attachment","content","ReturnValues","update","status"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,OAAO,MAAMC,IAAI,GAAGF,OAAO,CAAC,OAAOG,KAAP,EAAcC,OAAd,KAA0B;AACpD,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,IAAjB,CAAb;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAE,OADE;AAEb;AACA;AACA;AACAC,IAAAA,GAAG,EAAE;AACHC,MAAAA,MAAM,EAAET,KAAK,CAACU,cAAN,CAAqBC,QAArB,CAA8BC,iBADnC;AAEHC,MAAAA,MAAM,EAAEb,KAAK,CAACc,cAAN,CAAqBC;AAF1B,KALQ;AASb;AACA;AACAC,IAAAA,gBAAgB,EAAE,kDAXL;AAYbC,IAAAA,yBAAyB,EAAE;AACzB,qBAAef,IAAI,CAACgB,UAAL,IAAmB,IADT;AAEzB,kBAAYhB,IAAI,CAACiB,OAAL,IAAgB;AAFH,KAZd;AAgBb;AACA;AACA;AACAC,IAAAA,YAAY,EAAE;AAnBD,GAAf;AAsBA,QAAMtB,QAAQ,CAACuB,MAAT,CAAgBf,MAAhB,CAAN;AACA,SAAO;AAAEgB,IAAAA,MAAM,EAAE;AAAV,GAAP;AACD,CA1B0B,CAApB","sourcesContent":["import handler from \"./libs/handler-lib\";\r\nimport dynamoDb from \"./libs/dynamodb-lib\";\r\n\r\nexport const main = handler(async (event, context) => {\r\n  const data = JSON.parse(event.body);\r\n  const params = {\r\n    TableName: \"notes\",\r\n    // 'Key' 수정하고자 하는 아이템의 파티션 키와 정렬 키를 정의합니다.\r\n    // - 'userId': 인증된 사용자의 Cognito Identity Pool의 인증 ID\r\n    // - 'noteId': 경로 파라미터 \r\n    Key: {\r\n      userId: event.requestContext.identity.cognitoIdentityId,\r\n      noteId: event.pathParameters.id\r\n    },\r\n    // 'UpdateExpression' 업데이트 될 속성을 정의합니다.\r\n    // 'ExpressionAttributeValues' 업데이트 표현식의 값을 정의합니다.\r\n    UpdateExpression: \"SET content = :content, attachment = :attachment\",\r\n    ExpressionAttributeValues: {\r\n      \":attachment\": data.attachment || null,\r\n      \":content\": data.content || null\r\n    },\r\n    // 'ReturnValues' 아이템 속성을 반환할지 여부와 방법을 지정합니다.\r\n    // 여기서 ALL_NEW는 업데이트 후 항목의 모든 속성을 반환합니다.\r\n    // 아래에서 '결과값'을 검사하여 다른 설정에서 작동하는 방식을 확인할 수 있습니다.\r\n    ReturnValues: \"ALL_NEW\"\r\n  };\r\n\r\n  await dynamoDb.update(params);\r\n  return { status: true };\r\n});"]},"metadata":{},"sourceType":"module"}