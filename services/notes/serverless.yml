service: notes-api

# ES6 변환을 위해 serverless-webpack 플러그인 사용
plugins:
  - serverless-bundle
  - serverless-offline

# serverless-webpack 구성 
# 외부 모듈 패키징 자동화 활성
#custom:
#  webpack:
#    webpackConfig: ./webpack.config.js
#    includeModules: true

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  sstApp: ${self:custom.stage}-notes-infra
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stag e}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-2
   
  # These environment variables are made available to our functions
  # under process.env.
  # environment:
  #   tableName: "notes" #${self:custom.tableName}
  #   stripeSecretKey: ${self:custom.environment.stripeSecretKey}   
   
  # 'iamRoleStatements' Lambda 함수를 위한 권한 정책 정의
  # Lmabda 함수에 DynamoDB 액세스 권한을 설정합니다.
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:DescribeTable
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource: "arn:aws:dynamodb:ap-northeast-2:*:*"

    # These environment variables are made available to our functions
  # under process.env.
  environment:
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}
    tableName: !ImportValue '${self:custom.sstApp}-TableName'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
  # create.js의 메인 함수를 호출하는 HTTP API 엔드포인트를 정의
  # - path: url 경로는 /notes
  # - method: POST 요청
  # - cors: 브라우저의 크로스 도메인 API 호출을 위해 CORS (Cross-Origin Resource Sharing) 활성화 
  # - authorizer: AWS IAM 역할을 통한 인증 
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
          
  get:
    #  get.js의 main 함수를 호출하는 HTTP API 엔드포인트를 정의합니다.
    # - path: /notes/{id} url 경로
    # - method: GET 요청 
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
          
  list:
    # list.js의 메인 함수를 호출하는 HTTP API 엔드포인트를 정의합니다. 
    # - path: url 경로는 /notes
    # - method: GET 요청 
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
          
  update:
    # update.js의 메인 함수를 호출하는 HTTP API 엔드포인트를 정의합니다.
    # - path: url 경로는 /notes/{id} 입니다.
    # - method: PUT 요청 
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
          
  delete:
    # delete.js의 메인 함수를 호출하는 HTTP API 엔드포인트
    # - path: url 경로는 /notes/{id} 입니다.
    # - method: DELETE 요청 
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam          
          
  billing:
    handler: billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam          
          
          
# 분리된 CloudFormation 템플릿을 생성합니다. 
resources:    
  # API Gateway 에러 
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}